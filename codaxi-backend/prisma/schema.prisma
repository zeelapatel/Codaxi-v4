// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
  VIEWER
}

enum PlanType {
  FREE
  TEAM
  ENTERPRISE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  company   String?
  role      UserRole @default(MEMBER)
  avatar    String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Email verification
  emailVerified Boolean @default(false)
  verificationToken String?
  
  // Password reset
  resetToken String?
  resetTokenExpiry DateTime?
  
  // Last login tracking
  lastLoginAt DateTime?
  
  // Relations
  organizations OrganizationMember[]
  
  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  planType    PlanType @default(FREE)
  
  // Settings
  settings Json @default("{}")
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  members OrganizationMember[]
  
  @@map("organizations")
}

model OrganizationMember {
  id     String   @id @default(cuid())
  role   UserRole @default(MEMBER)
  
  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, organizationId])
  @@map("organization_members")
}

// Session management (for JWT token blacklisting)
model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  isRevoked    Boolean  @default(false)
  
  @@map("sessions")
}

// Audit log for security
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
}